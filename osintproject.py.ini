import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="osint_bot.log",
    filemode="a"
)

# üîπ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø OSINT-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /find <–Ω–∏–∫> –∏–ª–∏ /phone <–Ω–æ–º–µ—Ä>.")

# üîπ /find
async def find_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /find johndoe")
        return

    username = context.args[0]
    await update.message.reply_text(f"üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∏–∫—É: {username}...")

    # üî∏ –í–°–¢–ê–í–ò–ú –ü–û–¢–û–ú: –ø–æ–∏—Å–∫ –ø–æ —Å–æ—Ü—Å–µ—Ç—è–º, –±–∞–∑–∞–º –∏ —Ç.–¥.
    await update.message.reply_text(f"‚öôÔ∏è –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞: {username} –Ω–∞–π–¥–µ–Ω –≤ 0 –±–∞–∑–∞—Ö.")

# üîπ /phone
async def search_by_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /phone 87071234567")
        return

    phone = context.args[0]
    await update.message.reply_text(f"üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É: {phone}...")

    # üî∏ –í–°–¢–ê–í–ò–ú –ü–û–¢–û–ú: –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    await update.message.reply_text(f"üìû –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞: –¥–∞–Ω–Ω—ã—Ö –ø–æ {phone} –Ω–µ—Ç.")

# üîπ –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token("–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("find", find_user))
    app.add_handler(CommandHandler("phone", search_by_phone))

    await app.run_polling()

# üîπ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
if __name__ == "__main__":
    import asyncio

    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ü–∏–∫–ª, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∞—á–µ
            asyncio.ensure_future(main())
        else:
            loop.run_until_complete(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


